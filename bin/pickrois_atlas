#!/usr/bin/env python
# emacs: -*- mode: python; py-indent-offset: 4; indent-tabs-mode: nil -*-
# vi: set ft=python sts=4 ts=4 sw=4 et:

"""Pick ROIs from an atlas.

# Paste the output of 'prog -h' here.

"""

import argparse
import os
from nkpi.base import nkpi_logger

def main():
    parser = argparse.ArgumentParser(
            description = 'Pick ROIs from atlas.',
            prog = 'pickrois_atlas')
    
    parser.add_argument('--atlas',
                        dest = 'atlasfile',
                        required = True,
                        metavar = 'atlas-file',
                        help = 'an input nifti file for an atlas.')
    parser.add_argument('--idx',
                        dest = 'idxfile',
                        required = True,
                        metavar = 'idx-file',
                        help = 'an input txt file containing ROI idx list.')
    parser.add_argument('--o',
                        dest = 'outfile',
                        required = True,
                        metavar = 'out-file',
                        help = 'file name for output files.')
    
    # Others
    parser.add_argument('--log', 
                        dest = 'log', 
                        default = None,
                        metavar = 'log-file',
                        help='log name for the processing.')
    parser.add_argument('-v', action='version', version='%(prog)s 0.0.1')

    args = parser.parse_args()

    ### logger
    logger = nkpi_logger(args.log)
    logger.debug(args)
    logger.info('Start Running')

    ### begin your procedure
    
    idx_list = [idx[:-1] for idx in open(args.idxfile).readlines()]
    
    fout = args.outfile
    if os.environ['FSLDIR'] != None:
        cmdstr_comb = 'fslmaths '
        for idx in idx_list:
            print idx
            cmdstr_pick = 'fslmaths ' + args.atlasfile + ' -thr ' + idx + \
                          ' -uthr ' + idx + ' '+fout+'_temp_'+idx
            print cmdstr_pick
            os.system(cmdstr_pick)
            cmdstr_comb += fout+'_temp_'+idx + ' -add '
        cmdstr_comb = cmdstr_comb[:-5] + fout
        print cmdstr_comb
        os.system(cmdstr_comb)

        cmdstr_clean = 'rm ' + fout+'_temp_*'
        print cmdstr_clean
        os.system(cmdstr_clean)
            
    else:
        print 'FSL is needed!'
        #To Do without FSL
        #for idx in idx_list:
        #    print idx

    ### logger
    logger.info('Finished Running')
    
if __name__ == '__main__':
    main()

